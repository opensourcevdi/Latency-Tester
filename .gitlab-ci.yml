image: fedora
variables:
  GIT_STRATEGY: clone
stages: 
  - build

build-job:
  stage: build
  script: 
    - dnf -y update
    - dnf clean all
    - dnf install -y git cmake file gcc make man sudo tar
    - dnf install -y clang gcc-c++ boost boost-devel
    - ltsrc=$(pwd)
    - cd ..
    #
    # Build peldd to find dlls of exes
    #
    - git clone https://github.com/gsauthof/pe-util
    - cd pe-util
    - git submodule update --init
    - mkdir build
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Release
    - make
    - mv peldd /usr/bin/peldd
    - chmod +x /usr/bin/peldd

    #
    # Install Windows libraries
    #
    - dnf install -y mingw64-gcc
        mingw64-freetype
        mingw64-cairo
        mingw64-harfbuzz
        mingw64-pango
        mingw64-poppler
        mingw64-gtk4
        mingw64-gtk3
        mingw64-winpthreads-static
        mingw64-glib2-static
        mingw64-tesseract
        mingw64-leptonica
        mingw64-llvm
    # install rust
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -sSf | sh -s -- -y
    - . "$HOME/.cargo/env"
    - rustup target add x86_64-pc-windows-gnu
    - rustup update

    #
    # Setup for Windows
    #
    #

    # Set up rust for cross compiling
    #
    - |
      echo "[target.x86_64-pc-windows-gnu]
      linker = \"x86_64-w64-mingw32-gcc\"
      ar = \"x86_64-w64-mingw32-gcc-ar\"" > $HOME/.cargo/config

    - cat $HOME/.cargo/config
    #
    # Set ENV
    #
    - export PKG_CONFIG_ALLOW_CROSS=1
    - export PKG_CONFIG_PATH=/usr/x86_64-w64-mingw32/sys-root/mingw/lib/pkgconfig/
    - export GTK_INSTALL_PATH=/usr/x86_64-w64-mingw32/sys-root/mingw/
    - export MINGW_PREFIX=/usr/x86_64-w64-mingw32/sys-root/mingw
    #
    #build
    #
    - cd $ltsrc
    - cargo build --target=x86_64-pc-windows-gnu --release
    #
    # package 
    #
    - mkdir -p package_windows
    - out=$(realpath package_windows)
    # Add gdbus (https://discourse.gnome.org/t/gtk-warning-about-gdbus-exe-not-being-found-on-windows-msys2/2893/2)
    - cp $MINGW_PREFIX/bin/gdbus.exe $out
    # Add gspawn binaries for launching external processes (https://gitlab.gnome.org/GNOME/glib/-/issues/2843#note_1625472)
    - cp $MINGW_PREFIX/bin/gspawn-win64-helper-console.exe $MINGW_PREFIX/bin/gspawn-win64-helper.exe $out
    - cp target/x86_64-pc-windows-gnu/release/*.exe $out
    # Handle the glib schema compilation as well
    - glib-compile-schemas $MINGW_PREFIX/share/glib-2.0/schemas/
    - mkdir -p $out/share/glib-2.0/schemas/
    - cp -T $MINGW_PREFIX/share/glib-2.0/schemas/gschemas.compiled $out/share/glib-2.0/schemas/gschemas.compiled
    # Pixbuf stuff, in order to get SVGs (scalable icons) to load
    # currently causes a crash
    #- mkdir -p $out/lib/gdk-pixbuf-2.0
    #- cp -rT $MINGW_PREFIX/lib/gdk-pixbuf-2.0 $out/lib/gdk-pixbuf-2.0


    - for DLL in $(peldd $out/*.exe -t --ignore-errors);
        do cp "$DLL" $out;
      done

    - mkdir -p $out/share/{themes,gtk-4.0}
    - cp -r $GTK_INSTALL_PATH/share/glib-2.0/schemas $out/share/glib-2.0
    - cp -r $GTK_INSTALL_PATH/share/icons $out/share/icons

    - |
      cat << EOF > $out/share/gtk-4.0/settings.ini
      [Settings]
      gtk-theme-name = Windows10
      gtk-font-name = Segoe UI 10
      gtk-xft-rgba = rgb
      gtk-xft-antialias = 1
      EOF
    - mingw-strip $out/*.dll
    - mingw-strip $out/*.exe
  artifacts:
    paths: 
      - package_windows